#pragma checksum "C:\Workspace\Github\Moov\Moov-WebApplication-Project\Views\Moov\Onboarding.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "35201d32b0d7e036b1c2d4c8da52665664a1bf0a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Moov_Onboarding), @"mvc.1.0.view", @"/Views/Moov/Onboarding.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Workspace\Github\Moov\Moov-WebApplication-Project\Views\_ViewImports.cshtml"
using Moov_WebApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Workspace\Github\Moov\Moov-WebApplication-Project\Views\_ViewImports.cshtml"
using Moov_WebApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"35201d32b0d7e036b1c2d4c8da52665664a1bf0a", @"/Views/Moov/Onboarding.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"58b80c3fb93496ab5ad89387cbedf6e5cf30c4ca", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Moov_Onboarding : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Workspace\Github\Moov\Moov-WebApplication-Project\Views\Moov\Onboarding.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style style=""background-color:#222222""></style>
<style>
    :root {
        --moov-color-background: #25262D;
        --moov-color-background-secondary: #2D3037;
        --moov-color-background-tertiary: #3A3C45;
        --moov-color-primary: #6171F9;
        --moov-color-secondary: #828FFE;
        --moov-color-tertiary: #494A57;
        --moov-color-info: #94CBFF;
        --moov-color-warn: #EB5757;
        --moov-color-danger: #ED655C;
        --moov-color-success: #62E599;
        --moov-color-low-contrast: #9294A0;
        --moov-color-medium-contrast: #EBEBEF;
        --moov-color-high-contrast: #FFFFFF;
        --moov-color-graphic-1: #62E599;
        --moov-color-graphic-2: #62E599;
        --moov-color-graphic-3: #62E599;
    }
</style>
<moov-onboarding></moov-onboarding>
");
            WriteLiteral(@"<script src=""https://code.jquery.com/jquery-3.6.0.min.js"" integrity=""sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="" crossorigin=""anonymous""></script>
<script src=""https://js.moov.io/v1""></script>
<script>
    $(document).ready(function () {
        var token = """);
#nullable restore
#line 32 "C:\Workspace\Github\Moov\Moov-WebApplication-Project\Views\Moov\Onboarding.cshtml"
                Write(ViewBag.tokenRet);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        const onboarding = document.querySelector('moov-onboarding');
        onboarding.token = token;
        onboarding.facilitatorAccountID = ""217b54bc-1842-470e-95b0-71d329fb19ca"";
        onboarding.open = true; //calling onboarding screen
        onboarding.onCancel = () => {
        }
        onboarding.onResourceCreated = ({ resourceType, resource }) => {
            if (resourceType === ""account"") {
                localStorage.setItem('resource', resource);
                // TODO: Get accountid from resource object and store in local storage
                localStorage.setItem('accountID', resource.accountID);
                // getting accountID from localstorage
                var newAccountID = localStorage.getItem('accountID');
                // sc = all scopes are added in sc variable
                var sc = `/fed.read,/accounts/${newAccountID}/bank-accounts.read,/accounts/${newAccountID}/bank-accounts.write,/accounts/${newAccountID}/capabilities.read,/accounts/${newAcco");
            WriteLiteral(@"untID}/capabilities.write,/accounts/${newAccountID}/cards.read,/accounts/${newAccountID}/cards.write,/accounts/${newAccountID}/profile.read,/accounts/${newAccountID}/profile.write,/accounts/${newAccountID}/representatives.read,/accounts/${newAccountID}/representatives.write`;
                // TODO: Then again if you need token with new scopes, make anajax call to token request with new scopes
                $.ajax({
                    url: '/Moov/Token', // setting url
                    type: 'POST',
                    dataType: 'text',
                    contentType: 'application/json',
                    data: JSON.stringify(sc), //  sc variables to send to parameters
                    success: function (response) {
                        myToken1 = response.replace('""', ''); // receiving token
                        myToken2 = myToken1.replace('""', ''); // receiving token
                          onboarding.token = myToken2;                          
                          onbo");
            WriteLiteral(@"arding.plaid = {
                              redirectURL: ""https://localhost:44354"",
                              env: ""sandbox"",  // leave this off if production
                              onExit: (...args) => console.log(""on plaid exit"", ...args),
                              onEvent: (...args) => console.log(""on plaid event"", ...args),
                              onLoad: (...args) => console.log(""on plaid load"", ...args),
                              onSuccess: (...args) => console.log(""on plaid success"", ...args),
                            };
                         const moov = Moov(myToken2);                             
                         moov.plaid.initialize({
                              accountID: newAccountID,
                              redirectURL: ""https://localhost:44354"",
                              onSuccess: (bankAccount) => {
                                  debugger;
                                  console.log(""This"")
                             ");
            WriteLiteral(@"   // Moov bank account object will be passed on success
                              },
                              onExit: (err, metadata) => {
                                //optionally handle exit event
                              },
                              onEvent: (eventName, metadata) => {
                                //optionally handle events
                              }
                            })
                              .then(handler => {
                                handler.open()
                              })

                    },
                    error: function () {
                        alert(""error"");
                    }
                });
            }
        }
    });
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
